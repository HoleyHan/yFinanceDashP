import streamlit as st
import pandas as pd
import yfinance as yf
import plotly.graph_objects as go
import json

# -----------------------------
# PAGE CONFIG
# -----------------------------
st.set_page_config(page_title="Macro Dashboard", page_icon=":bar_chart:", layout="wide")

# -----------------------------
# SESSION STATE
# -----------------------------
if 'dark_mode' not in st.session_state:
    st.session_state['dark_mode'] = False

# -----------------------------
# LOAD CONFIG JSON
# -----------------------------
with open(".streamlit/app_refs.json") as f:
    app_refs = json.load(f)

macros = app_refs.get("macros", {})

# -----------------------------
# PAGE FILTERS
# -----------------------------
st.title("Macro Dashboard")
region = st.selectbox("Region", sorted(list(macros.get("interest_rates", {}).keys())))
all_categories = ["Interest Rates", "Inflation", "FX Rates", "Commodities Indices", "Other Economic Data"]

mode = st.radio("Mode", ["Single Category", "Overlay Multi-Category"])

if mode == "Single Category":
    categories = [st.selectbox("Select Category", all_categories)]
else:
    categories = st.multiselect("Select Categories to Overlay", all_categories, default=["Interest Rates"])

period = st.selectbox("Period", app_refs.get("default_periods", ["1d","5d","1mo","3mo","6mo","1y"]))

# -----------------------------
# LAZY FETCH FUNCTION
# -----------------------------
@st.cache_data(ttl=600)
def fetch_ticker_data(ticker, period):
    """Fetch individual ticker data (lazy loading)."""
    try:
        df = yf.Ticker(ticker).history(period=period)[["Close"]].rename(columns={"Close": ticker})
        df.reset_index(inplace=True)
        return df
    except Exception as e:
        st.error(f"Error fetching {ticker}: {e}")
        return pd.DataFrame()

# -----------------------------
# HELPER TO GET TICKERS PER CATEGORY
# -----------------------------
def get_tickers(category, region):
    if category == "Interest Rates":
        return macros.get("interest_rates", {}).get(region, {})
    elif category == "Inflation":
        return {f"{region} CPI": macros.get("inflation", {}).get(f"{region} CPI")}
    elif category == "FX Rates":
        return macros.get("fx_rates", {})
    elif category == "Commodities Indices":
        return macros.get("commodities_indices", {})
    elif category == "Other Economic Data":
        return macros.get("other", {}).get(region, {})
    return {}

# -----------------------------
# SINGLE CATEGORY MODE
# -----------------------------
if mode == "Single Category":
    category = categories[0]
    tickers = get_tickers(category, region)

    if not tickers:
        st.info(f"No data available for {category} ({region})")
    else:
        df_category = pd.DataFrame()
        for name, ticker in tickers.items():
            df = fetch_ticker_data(ticker, period)
            if not df.empty:
                df = df.rename(columns={ticker: name})
                if df_category.empty:
                    df_category = df
                else:
                    df_category = pd.merge(df_category, df, on="Date", how="outer")

        if not df_category.empty:
            st.subheader(f"{category} Data Table")
            st.dataframe(df_category, use_container_width=True)

            # Plot
            colors = ["#00BFFF", "#1E90FF", "#32CD32", "#FF4500", "#FFD700", "#FF8C00", "#8A2BE2"]
            bg_color = "#FFFFFF" if not st.session_state['dark_mode'] else "#262A2F"
            text_color = "#000000" if not st.session_state['dark_mode'] else "#F0F0F0"

            df_pct = df_category.copy()
            for col in df_pct.columns:
                if col != "Date":
                    df_pct[col] = df_pct[col] / df_pct[col].iloc[0] * 100  # normalize to 100

            fig = go.Figure()
            for i, col in enumerate(df_pct.columns):
                if col != "Date":
                    fig.add_trace(go.Scatter(
                        x=df_pct["Date"],
                        y=df_pct[col],
                        mode='lines+markers',
                        name=col,
                        line=dict(color=colors[i % len(colors)], width=2),
                        marker=dict(size=4),
                        hovertemplate=f"%{{y:.2f}}%<br>Date: %{{x|%Y-%m-%d}}<br>{col}"
                    ))

            fig.update_layout(
                title=f"{category} Trends ({region}) - % Change Overlay",
                plot_bgcolor=bg_color,
                paper_bgcolor=bg_color,
                font_color=text_color,
                hovermode="x unified",
                xaxis_title="Date",
                yaxis_title="% Change (normalized to 100)"
            )
            st.plotly_chart(fig, use_container_width=True)

# -----------------------------
# MULTI-CATEGORY OVERLAY MODE
# -----------------------------
else:
    df_overlay = pd.DataFrame()
    overlay_names = []

    for category in categories:
        tickers = get_tickers(category, region)
        for name, ticker in tickers.items():
            df = fetch_ticker_data(ticker, period)
            if not df.empty:
                df = df.rename(columns={ticker: name})
                if df_overlay.empty:
                    df_overlay = df
                else:
                    df_overlay = pd.merge(df_overlay, df, on="Date", how="outer")
                overlay_names.append(name)

    if df_overlay.empty:
        st.info("No data available for selected categories")
    else:
        st.subheader("Overlay Data Table")
        st.dataframe(df_overlay, use_container_width=True)

        # Plot
        colors = ["#00BFFF", "#1E90FF", "#32CD32", "#FF4500", "#FFD700", "#FF8C00", "#8A2BE2"]
        bg_color = "#FFFFFF" if not st.session_state['dark_mode'] else "#262A2F"
        text_color = "#000000" if not st.session_state['dark_mode'] else "#F0F0F0"

        df_pct = df_overlay.copy()
        for col in df_pct.columns:
            if col != "Date":
                df_pct[col] = df_pct[col] / df_pct[col].iloc[0] * 100  # normalize to 100

        fig = go.Figure()
        for i, col in enumerate(df_pct.columns):
            if col != "Date":
                fig.add_trace(go.Scatter(
                    x=df_pct["Date"],
                    y=df_pct[col],
                    mode='lines+markers',
                    name=col,
                    line=dict(color=colors[i % len(colors)], width=2),
                    marker=dict(size=4),
                    hovertemplate=f"%{{y:.2f}}%<br>Date: %{{x|%Y-%m-%d}}<br>{col}"
                ))

        fig.update_layout(
            title="Multi-Category Overlay - % Change Comparison",
            plot_bgcolor=bg_color,
            paper_bgcolor=bg_color,
            font_color=text_color,
            hovermode="x unified",
            xaxis_title="Date",
            yaxis_title="% Change (normalized to 100)"
        )
        st.plotly_chart(fig, use_container_width=True)